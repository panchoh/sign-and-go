# Copyright 2020 Banco Bilbao Vizcaya Argentaria, S.A.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# File: action.yml
# Description: Metadata¹ and full implementation for this GitHub Action
#
# ¹: https://help.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions

name: 'Sign-and-Go'
description: 'Sign your release artifacts with GPG'
author: 'panchoh'
branding:
  icon: 'lock'
  color: 'blue'
inputs:
  revokers-dirpath:
    description: 'Path to the directory containing the revoker keys'
    required: false
    default: '.github/revokers/'
outputs:
  signing-key-id:
    description: 'Key ID of the just-created GPG key'
    value: ${{ steps.sign-and-go.outputs.signing-key-id }}
runs:
  using: "composite"
  steps:
    #     # Ensure that the file that holds the Go version exists
    #     if [[ ! -e "$go_version_filepath" ]]; then
    #       echo "::error::File ’$go_version_filepath’ does not exist!"
    #       exit 1
    #     fi

  - name: Generate release signing key
    id: sign-and-go
    shell: bash
    run: |
      SIGNER=$(gpg --batch --generate-key <<EOF 2>&1 | awk '/^gpg: key [A-Z0-9]* marked as ultimately trusted/ { print $3; exit }'
      %echo Generating a signing OpenPGP key
      %no-protection
      Key-Type: RSA
      Key-Length: 4096
      Key-Usage: sign
      Name-Real: Sign-and-Go Release Bot
      Name-Comment: ${GITHUB_REF#refs/tags/}
      Name-Email: release-bot@sign-and-go
      Expire-Date: 1d
      %echo done
      EOF
      )

      declare -a REVOKERS

      # TODO: handle case when input is empty (the * will be passed on)
      for revoker in "${{ inputs.revokers-dirpath }}"/*
      do
        gpg --import "$revoker"
        FINGERPRINT=$(basename $revoker .gpg)
        REVOKERS+=($FINGERPRINT)
      done

      sudo apt install expect
      expect -f- "$SIGNER" "${REVOKERS[@]}" <<'EOF'
      set SIGNER [lindex $argv 0]
      set REVOKERS [lrange $argv 1 end]

      if { $SIGNER eq "" || 0 == [llength $REVOKERS] } {
        puts stderr "usage: addrevokers SIGNER_KEY REVOKER_KEY..."
        exit 1
      }

      spawn gpg --command-fd 0 --status-fd 1 --edit-key $SIGNER

      foreach REVOKER $REVOKERS {
        send "addrevoker\n"
        expect "GET_LINE keyedit.add_revoker"
        send "$REVOKER\n"
        expect "GET_BOOL keyedit.add_revoker.okay"
        send "y\n"
        expect "GET_LINE keyedit.prompt"
      }

      send "save\n"
      expect eof
      puts "Done."
      EOF

      echo ::set-output name=signing-key-id::"$SIGNER"

  - name: Export public GPG key
    shell: bash
    run: |
      gpg --no-tty --armor --output static/keys/release-key-"${GITHUB_REF#refs/tags/}".gpg --export "$SIGNER"
      echo "- ${GITHUB_REF#refs/tags/}" >> static/_data/releases.yaml

  - name: Remove GNUPGHOME # TODO Register HOOK
    shell: bash
    run: |
      rm -rf ~/.gnupg
